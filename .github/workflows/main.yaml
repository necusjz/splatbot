name: build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

env:
  CACHE_PREFIX: v0
  PYTHONPATH: ./

jobs:
  checks:
    name: Python ${{ matrix.python }} - ${{ matrix.task.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python: ["3.9", "3.11"]
        task:
          - name: Test
            run: pytest -s -v --color=yes tests/
        include:
          - python: "3.11"
            task:
              name: Lint
              run: ruff check .

          - python: "3.11"
            task:
              name: Style
              run: isort --check .

          - python: "3.11"
            task:
              name: Build
              run: python -m build --sdist --wheel

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip bluez bluetooth pkg-config build-essential libdbus-glib-1-dev libgirepository1.0-dev

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install uv
        run: |
          python -m pip install --upgrade pipx
          python -m pipx ensurepath
          pipx install uv

      - name: Cache virtual environment
        uses: actions/cache@v3
        id: uv-cache
        with:
          path: .venv
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-python-${{ matrix.python }}-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        run: |
          uv venv .venv
          . .venv/bin/activate
          if [ "${{ steps.uv-cache.outputs.cache-hit }}" == "true" ]; then
            echo "Using cached virtualenv"
          else
            echo "Fresh environment setup"
          fi
          uv pip compile --extra dev pyproject.toml
          uv pip sync pyproject.toml

      - name: Run task ${{ matrix.task.name }}
        run: |
          . .venv/bin/activate
          ${{ matrix.task.run }}

      - name: Upload package distribution files
        if: matrix.task.name == 'Build'
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist

      - name: Clean up
        if: always()
        run: |
          . .venv/bin/activate
          uv pip uninstall -y splatbot || true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: checks
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip bluez bluetooth pkg-config build-essential libdbus-glib-1-dev libgirepository1.0-dev

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv and sync environment
        run: |
          python -m pip install --upgrade pipx
          python -m pipx ensurepath
          pipx install uv
          uv venv .venv
          . .venv/bin/activate
          uv pip compile --extra dev pyproject.toml
          uv pip sync pyproject.toml
          uv pip install build twine

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v4.1.7
        with:
          name: package
          path: dist

      - name: Generate release notes
        run: ./scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Publish package to PyPI
        run: |
          . .venv/bin/activate
          twine upload -u '${{ secrets.PYPI_USERNAME }}' -p '${{ secrets.PYPI_PASSWORD }}' dist/*

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, 'rc') }}
          files: dist/*
